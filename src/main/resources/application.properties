spring.application.name=real-estate-site

# Step 1
# Connect to H2 database
# spring.datasource.url=jdbc:h2:mem:testdb

# Step 2
# connect to dockerized MySQL database
# local: localhost
# spring.datasource.url=jdbc:mysql://localhost:3306/realestate-database
# Docker: ip address from inspector on docker desktop
spring.datasource.url=${DB_URL:jdbc:mysql://localhost:3306/realestate-db}
spring.datasource.username=user
spring.datasource.password=password
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# docker run --detach --name realestate-mysql-cont --network=spring-boot-mysql-network --env MYSQL_ROOT_PASSWORD=nasser258 --env MYSQL_USER=realestate-user --env MYSQL_PASSWORD=password --env MYSQL_DATABASE=realestate-database --publish 3306:3306 mysql:8-oracle

# Step 3
# Connect to AWS RDS MySQL database
# spring.datasource.url=jdbc:mysql://real-estate-database.cc0f77lsxmkp.us-east-1.rds.amazonaws.com:3306/realestate_database
# spring.datasource.username=nasser258
# spring.datasource.password=Abdalnasser99

# initialize the database tables before data.sql executed
# Defer database initialization until after JPA has been initialized
spring.jpa.defer-datasource-initialization=true 

# Show SQL queries executed
spring.jpa.show-sql=true

# create tables from model entities
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect


# docker run --detach 
# --env MYSQL_ROOT_PASSWORD=nasser258
# --env MYSQL_USER=realestate-user 
# --env MYSQL_PASSWORD=password 
# --env MYSQL_DATABASE=realestate-db
# --name realestate-mysql 
# --publish 3306:3306 mysql:8-oracle